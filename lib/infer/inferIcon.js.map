{"version":3,"sources":["infer/inferIcon.js"],"names":["downloadFile","allowedIconFormats","setGracefulCleanup","GITCLOUD_SPACE_DELIMITER","inferIconFromStore","targetUrl","platform","allowedFormats","then","iconWithScores","mapIconWithMatchScore","fileIndex","maxScore","getMaxMatchScore","matchingIcons","getMatchingIcons","matchingUrl","format","icon","ext","url","normalisedTargetUrl","toLowerCase","map","itemWords","item","name","split","score","reduce","currentScore","word","includes","Object","assign","currentIcon","filter","extname","writeFilePromise","outPath","data","Promise","resolve","reject","writeFile","error","inferFromPage","outDir","preferredExt","outfilePath","join","inferIconFromUrlToPath","inferIcon","tmpObj","dirSync","unsafeCleanup","tmpPath"],"mappings":"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","file":"infer/inferIcon.js","sourcesContent":["import pageIcon from 'page-icon';\nimport path from 'path';\nimport fs from 'fs';\nimport tmp from 'tmp';\nimport gitCloud from 'gitcloud';\nimport helpers from './../helpers/helpers';\n\nconst {downloadFile, allowedIconFormats} = helpers;\ntmp.setGracefulCleanup();\n\nconst GITCLOUD_SPACE_DELIMITER = '-';\n\nfunction inferIconFromStore(targetUrl, platform) {\n    const allowedFormats = allowedIconFormats(platform);\n\n    return gitCloud('http://jiahaog.com/nativefier-icons/')\n        .then(fileIndex => {\n            const iconWithScores = mapIconWithMatchScore(fileIndex, targetUrl);\n            const maxScore = getMaxMatchScore(iconWithScores);\n\n            if (maxScore === 0) {\n                return null;\n            }\n\n            const matchingIcons = getMatchingIcons(iconWithScores, maxScore);\n\n            let matchingUrl;\n            for (let format of allowedFormats) {\n                for (let icon of matchingIcons) {\n                    if (icon.ext !== format) {\n                        continue;\n                    }\n                    matchingUrl = icon.url;\n                }\n            }\n\n            if (!matchingUrl) {\n                return null;\n            }\n            return downloadFile(matchingUrl);\n        });\n}\n\nfunction mapIconWithMatchScore(fileIndex, targetUrl) {\n    const normalisedTargetUrl = targetUrl.toLowerCase();\n    return fileIndex\n        .map(item => {\n            const itemWords = item.name.split(GITCLOUD_SPACE_DELIMITER);\n            const score = itemWords.reduce((currentScore, word) => {\n                if (normalisedTargetUrl.includes(word)) {\n                    return currentScore + 1;\n                }\n                return currentScore;\n            }, 0);\n\n            return Object.assign({},\n                item,\n                {score}\n            );\n        });\n}\n\nfunction getMaxMatchScore(iconWithScores) {\n    return iconWithScores.reduce((maxScore, currentIcon) => {\n        const currentScore = currentIcon.score;\n        if (currentScore > maxScore) {\n            return currentScore;\n        }\n        return maxScore;\n    }, 0);\n}\n\n/**\n * also maps ext to icon object\n */\nfunction getMatchingIcons(iconWithScores, maxScore) {\n    return iconWithScores\n        .filter(item => {\n            return item.score === maxScore;\n        })\n        .map(item => {\n            return Object.assign(\n                {},\n                item,\n                {ext: path.extname(item.url)}\n            );\n        });\n}\n\nfunction writeFilePromise(outPath, data) {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(outPath, data, error => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(outPath);\n        });\n    });\n}\n\nfunction inferFromPage(targetUrl, platform, outDir) {\n    let preferredExt = '.png';\n    if (platform === 'win32') {\n        preferredExt = '.ico';\n    }\n\n    // todo might want to pass list of preferences instead\n    return pageIcon(targetUrl, {ext: preferredExt})\n        .then(icon => {\n            if (!icon) {\n                return null;\n            }\n\n            const outfilePath = path.join(outDir, `/icon${icon.ext}`);\n            return writeFilePromise(outfilePath, icon.data);\n        });\n}\n/**\n *\n * @param {string} targetUrl\n * @param {string} platform\n * @param {string} outDir\n */\nfunction inferIconFromUrlToPath(targetUrl, platform, outDir) {\n\n    return inferIconFromStore(targetUrl, platform)\n        .then(icon => {\n            if (!icon) {\n                return inferFromPage(targetUrl, platform, outDir);\n            }\n\n            const outfilePath = path.join(outDir, `/icon${icon.ext}`);\n            return writeFilePromise(outfilePath, icon.data);\n        });\n}\n\n/**\n * @param {string} targetUrl\n * @param {string} platform\n */\nfunction inferIcon(targetUrl, platform) {\n    const tmpObj = tmp.dirSync({unsafeCleanup: true});\n    const tmpPath = tmpObj.name;\n    return inferIconFromUrlToPath(targetUrl, platform, tmpPath);\n}\n\nexport default inferIcon;\n"],"sourceRoot":"/source/"}