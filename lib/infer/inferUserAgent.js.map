{"version":3,"sources":["infer/inferUserAgent.js"],"names":["getUserAgentString","ELECTRON_VERSIONS_URL","DEFAULT_CHROME_VERSION","getChromeVersionForElectronVersion","electronVersion","url","get","timeout","then","response","status","data","electronVersionToChromeVersion","zipObject","map","d","version","chrome","chromeVersion","platform","userAgent","inferUserAgent","catch","warn"],"mappings":";;;;;QAyBgBA,kB,GAAAA,kB;;AAzBhB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,wBAAwB,gDAA9B;AACA,IAAMC,yBAAyB,cAA/B;;AAEA,SAASC,kCAAT,CAA4CC,eAA5C,EAA0F;AAAA,QAA7BC,GAA6B,yDAAvBJ,qBAAuB;;AACtF,WAAO,gBAAMK,GAAN,CAAUD,GAAV,EAAe,EAACE,SAAS,IAAV,EAAf,EACFC,IADE,CACG,oBAAY;AACd,YAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,gDAAkCD,SAASC,MAA3C;AACH;;AAED,YAAMC,OAAOF,SAASE,IAAtB;AACA,YAAMC,iCAAiC,iBAAEC,SAAF,CAAYF,KAAKG,GAAL,CAAS;AAAA,mBAAKC,EAAEC,OAAP;AAAA,SAAT,CAAZ,EAAsCL,KAAKG,GAAL,CAAS;AAAA,mBAAKC,EAAEE,MAAP;AAAA,SAAT,CAAtC,CAAvC;;AAEA,YAAI,EAAEb,mBAAmBQ,8BAArB,CAAJ,EAA0D;AACtD,0CAA2BR,eAA3B;AACH;;AAED,eAAOQ,+BAA+BR,eAA/B,CAAP;AACH,KAdE,CAAP;AAeH;;AAEM,SAASJ,kBAAT,CAA4BkB,aAA5B,EAA2CC,QAA3C,EAAqD;AACxD,QAAIC,kBAAJ;AACA,YAAQD,QAAR;AACI,aAAK,QAAL;AACIC,2HAA6GF,aAA7G;AACA;AACJ,aAAK,OAAL;AACIE,wGAA0FF,aAA1F;AACA;AACJ,aAAK,OAAL;AACIE,2GAA6FF,aAA7F;AACA;AACJ;AACI,kBAAM,0DAAN;AAXR;AAaA,WAAOE,SAAP;AACH;;AAED,SAASC,cAAT,CAAwBjB,eAAxB,EAAyCe,QAAzC,EAAgF;AAAA,QAA7Bd,GAA6B,yDAAvBJ,qBAAuB;;AAC5E,WAAOE,mCAAmCC,eAAnC,EAAoDC,GAApD,EACFG,IADE,CACG,yBAAiB;AACnB,eAAOR,mBAAmBkB,aAAnB,EAAkCC,QAAlC,CAAP;AACH,KAHE,EAIFG,KAJE,CAII,YAAM;AACT,2BAAIC,IAAJ,2DAAiErB,sBAAjE;AACA,eAAOF,mBAAmBE,sBAAnB,EAA2CiB,QAA3C,CAAP;AACH,KAPE,CAAP;AAQH;;kBAEcE,c","file":"infer/inferUserAgent.js","sourcesContent":["import axios from 'axios';\nimport _ from 'lodash';\nimport log from 'loglevel';\n\nconst ELECTRON_VERSIONS_URL = 'https://atom.io/download/atom-shell/index.json';\nconst DEFAULT_CHROME_VERSION = '47.0.2526.73';\n\nfunction getChromeVersionForElectronVersion(electronVersion, url = ELECTRON_VERSIONS_URL) {\n    return axios.get(url, {timeout: 5000})\n        .then(response => {\n            if (response.status !== 200) {\n                throw `Bad request: Status code ${response.status}`;\n            }\n\n            const data = response.data;\n            const electronVersionToChromeVersion = _.zipObject(data.map(d => d.version), data.map(d => d.chrome));\n\n            if (!(electronVersion in electronVersionToChromeVersion)) {\n                throw `Electron version '${electronVersion}' not found in retrieved version list!`;\n            }\n\n            return electronVersionToChromeVersion[electronVersion];\n        });\n}\n\nexport function getUserAgentString(chromeVersion, platform) {\n    let userAgent;\n    switch (platform) {\n        case 'darwin':\n            userAgent = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n            break;\n        case 'win32':\n            userAgent = `Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n            break;\n        case 'linux':\n            userAgent = `Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n            break;\n        default:\n            throw 'Error invalid platform specified to getUserAgentString()';\n    }\n    return userAgent;\n}\n\nfunction inferUserAgent(electronVersion, platform, url = ELECTRON_VERSIONS_URL) {\n    return getChromeVersionForElectronVersion(electronVersion, url)\n        .then(chromeVersion => {\n            return getUserAgentString(chromeVersion, platform);\n        })\n        .catch(() => {\n            log.warn(`Unable to infer chrome version for user agent, using ${DEFAULT_CHROME_VERSION}`);\n            return getUserAgentString(DEFAULT_CHROME_VERSION, platform);\n        });\n}\n\nexport default inferUserAgent;\n"],"sourceRoot":"/source/"}