{"version":3,"sources":["options/optionsMain.js"],"names":["inpOptions","options","dir","name","win32metadata","ProductName","InternalName","FileDescription","targetUrl","platform","inferPlatform","arch","inferArch","electronVersion","nativefierVersion","version","out","process","cwd","overwrite","asar","conceal","icon","counter","width","height","minWidth","minHeight","maxWidth","maxHeight","showMenuBar","fastQuit","userAgent","ignoreCertificate","ignoreGpuBlacklist","enableEs3Apis","insecure","flashPluginDir","flashPath","flash","diskCacheSize","inject","ignore","fullScreen","maximize","hideWindowFrame","verbose","disableContextMenu","disableDevTools","crashReporter","tmpdir","zoom","internalUrls","singleInstance","setLevel","honest","toLowerCase"],"mappings":"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","file":"optionsMain.js","sourcesContent":["import log from 'loglevel';\n\nimport inferOs from './../infer/inferOs';\nimport normalizeUrl from './normalizeUrl';\nimport packageJson from './../../package.json';\nimport { ELECTRON_VERSION, PLACEHOLDER_APP_DIR } from './../constants';\nimport asyncConfig from './asyncConfig';\n\nconst { inferPlatform, inferArch } = inferOs;\n\n/**\n * Extracts only desired keys from inpOptions and augments it with defaults\n * @param {Object} inpOptions\n * @returns {Promise}\n */\nexport default function (inpOptions) {\n  const options = {\n    dir: PLACEHOLDER_APP_DIR,\n    name: inpOptions.name,\n    win32metadata: {\n      ProductName: inpOptions.name,\n      InternalName: inpOptions.name,\n      FileDescription: inpOptions.name,\n    },\n    targetUrl: normalizeUrl(inpOptions.targetUrl),\n    platform: inpOptions.platform || inferPlatform(),\n    arch: inpOptions.arch || inferArch(),\n    electronVersion: inpOptions.electronVersion || ELECTRON_VERSION,\n    nativefierVersion: packageJson.version,\n    out: inpOptions.out || process.cwd(),\n    overwrite: inpOptions.overwrite,\n    asar: inpOptions.conceal || false,\n    icon: inpOptions.icon,\n    counter: inpOptions.counter || false,\n    width: inpOptions.width || 1280,\n    height: inpOptions.height || 800,\n    minWidth: inpOptions.minWidth,\n    minHeight: inpOptions.minHeight,\n    maxWidth: inpOptions.maxWidth,\n    maxHeight: inpOptions.maxHeight,\n    showMenuBar: inpOptions.showMenuBar || false,\n    fastQuit: inpOptions.fastQuit || false,\n    userAgent: inpOptions.userAgent,\n    ignoreCertificate: inpOptions.ignoreCertificate || false,\n    ignoreGpuBlacklist: inpOptions.ignoreGpuBlacklist || false,\n    enableEs3Apis: inpOptions.enableEs3Apis || false,\n    insecure: inpOptions.insecure || false,\n    flashPluginDir: inpOptions.flashPath || inpOptions.flash || null,\n    diskCacheSize: inpOptions.diskCacheSize || null,\n    inject: inpOptions.inject || null,\n    ignore: 'src',\n    fullScreen: inpOptions.fullScreen || false,\n    maximize: inpOptions.maximize || false,\n    hideWindowFrame: inpOptions.hideWindowFrame,\n    verbose: inpOptions.verbose,\n    disableContextMenu: inpOptions.disableContextMenu,\n    disableDevTools: inpOptions.disableDevTools,\n    crashReporter: inpOptions.crashReporter,\n    // workaround for electron-packager#375\n    tmpdir: false,\n    zoom: inpOptions.zoom || 1.0,\n    internalUrls: inpOptions.internalUrls || null,\n    singleInstance: inpOptions.singleInstance || false,\n  };\n\n  if (options.verbose) {\n    log.setLevel('trace');\n  } else {\n    log.setLevel('error');\n  }\n\n  if (options.flashPluginDir) {\n    options.insecure = true;\n  }\n\n  if (inpOptions.honest) {\n    options.userAgent = null;\n  }\n\n  if (options.platform.toLowerCase() === 'windows') {\n    options.platform = 'win32';\n  }\n\n  if (options.platform.toLowerCase() === 'osx' || options.platform.toLowerCase() === 'mac') {\n    options.platform = 'darwin';\n  }\n\n  if (options.width > options.maxWidth) {\n    options.width = options.maxWidth;\n  }\n\n  if (options.height > options.maxHeight) {\n    options.height = options.maxHeight;\n  }\n\n  return asyncConfig(options);\n}\n\n"]}