{"version":3,"sources":["options/optionsMain.js"],"names":["inferPlatform","inferArch","PLACEHOLDER_APP_DIR","join","__dirname","ELECTRON_VERSION","DEFAULT_APP_NAME","optionsFactory","inpOptions","callback","options","appVersion","buildVersion","appCopyright","win32metadata","versionString","dir","name","targetUrl","platform","arch","version","electronVersion","nativefierVersion","out","process","cwd","overwrite","asar","conceal","icon","counter","width","height","minWidth","minHeight","maxWidth","maxHeight","showMenuBar","fastQuit","userAgent","ignoreCertificate","insecure","flashPluginDir","flashPath","flash","inject","ignore","fullScreen","maximize","hideWindowFrame","verbose","disableContextMenu","disableDevTools","tmpdir","zoom","internalUrls","setLevel","honest","toLowerCase","waterfall","then","catch","pngPath","warn","error","length","pageTitle","trim","kebabCase","sanitizeOptions","sanitizeFilename","str","cleaned","replace"],"mappings":"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","file":"options/optionsMain.js","sourcesContent":["import path from 'path';\nimport _ from 'lodash';\nimport async from 'async';\nimport log from 'loglevel';\nimport sanitizeFilenameLib from 'sanitize-filename';\n\nimport inferIcon from './../infer/inferIcon';\nimport inferTitle from './../infer/inferTitle';\nimport inferOs from './../infer/inferOs';\nimport inferUserAgent from './../infer/inferUserAgent';\nimport normalizeUrl from './normalizeUrl';\nimport packageJson from './../../package.json';\n\nconst {inferPlatform, inferArch} = inferOs;\n\nconst PLACEHOLDER_APP_DIR = path.join(__dirname, '../../', 'app');\nconst ELECTRON_VERSION = '1.1.3';\n\nconst DEFAULT_APP_NAME = 'APP';\n\n/**\n * @callback optionsCallback\n * @param error\n * @param options augmented options\n */\n\n/**\n * Extracts only desired keys from inpOptions and augments it with defaults\n * @param inpOptions\n * @param {optionsCallback} callback\n */\nfunction optionsFactory(inpOptions, callback) {\n\n    const options = {\n        'app-version': inpOptions.appVersion,\n        'build-version': inpOptions.buildVersion,\n        'app-copyright': inpOptions.appCopyright,\n        win32metadata: inpOptions.win32metadata,\n        'version-string': inpOptions.versionString,\n        dir: PLACEHOLDER_APP_DIR,\n        name: inpOptions.name,\n        targetUrl: normalizeUrl(inpOptions.targetUrl),\n        platform: inpOptions.platform || inferPlatform(),\n        arch: inpOptions.arch || inferArch(),\n        version: inpOptions.electronVersion || ELECTRON_VERSION,\n        nativefierVersion: packageJson.version,\n        out: inpOptions.out || process.cwd(),\n        overwrite: inpOptions.overwrite,\n        asar: inpOptions.conceal || false,\n        icon: inpOptions.icon,\n        counter: inpOptions.counter || false,\n        width: inpOptions.width || 1280,\n        height: inpOptions.height || 800,\n        minWidth: inpOptions.minWidth,\n        minHeight: inpOptions.minHeight,\n        maxWidth: inpOptions.maxWidth,\n        maxHeight: inpOptions.maxHeight,\n        showMenuBar: inpOptions.showMenuBar || false,\n        fastQuit: inpOptions.fastQuit || false,\n        userAgent: inpOptions.userAgent,\n        ignoreCertificate: inpOptions.ignoreCertificate || false,\n        insecure: inpOptions.insecure || false,\n        flashPluginDir: inpOptions.flashPath || inpOptions.flash || null,\n        inject: inpOptions.inject || null,\n        ignore: 'src',\n        fullScreen: inpOptions.fullScreen || false,\n        maximize: inpOptions.maximize || false,\n        hideWindowFrame: inpOptions.hideWindowFrame,\n        verbose: inpOptions.verbose,\n        disableContextMenu: inpOptions.disableContextMenu,\n        disableDevTools: inpOptions.disableDevTools,\n        // workaround for electron-packager#375\n        tmpdir: false,\n        zoom: inpOptions.zoom || 1.0,\n        internalUrls: inpOptions.internalUrls || null\n    };\n\n    if (options.verbose) {\n        log.setLevel('trace');\n    } else {\n        log.setLevel('error');\n    }\n\n    if (options.flashPluginDir) {\n        options.insecure = true;\n    }\n\n    if (inpOptions.honest) {\n        options.userAgent = null;\n    }\n\n    if (options.platform.toLowerCase() === 'windows') {\n        options.platform = 'win32';\n    }\n\n    if (options.platform.toLowerCase() === 'osx' || options.platform.toLowerCase() === 'mac') {\n        options.platform = 'darwin';\n    }\n\n    if (options.width > options.maxWidth) {\n        options.width = options.maxWidth;\n    }\n\n    if (options.height > options.maxHeight) {\n        options.height = options.maxHeight;\n    }\n\n    async.waterfall([\n        callback => {\n            if (options.userAgent) {\n                callback();\n                return;\n            }\n            inferUserAgent(options.version, options.platform)\n                .then(userAgent => {\n                    options.userAgent = userAgent;\n                    callback();\n                })\n                .catch(callback);\n        },\n        callback => {\n            if (options.icon) {\n                callback();\n                return;\n            }\n            inferIcon(options.targetUrl, options.platform)\n                .then(pngPath => {\n                    options.icon = pngPath;\n                    callback();\n                })\n                .catch(error => {\n                    log.warn('Cannot automatically retrieve the app icon:', error);\n                    callback();\n                });\n        },\n        callback => {\n            // length also checks if its the commanderJS function or a string\n            if (options.name && options.name.length > 0) {\n                callback();\n                return;\n            }\n\n            inferTitle(options.targetUrl, function(error, pageTitle) {\n                if (error) {\n                    log.warn(`Unable to automatically determine app name, falling back to '${DEFAULT_APP_NAME}'`);\n                    options.name = DEFAULT_APP_NAME;\n                } else {\n                    options.name = pageTitle.trim();\n                }\n                if (options.platform === 'linux') {\n                    // spaces will cause problems with Ubuntu when pinned to the dock\n                    options.name = _.kebabCase(options.name);\n                }\n                callback();\n            });\n        }\n    ], error => {\n        callback(error, sanitizeOptions(options));\n    });\n}\n\nfunction sanitizeFilename(str) {\n    const cleaned = sanitizeFilenameLib(str);\n    // remove all non ascii or use default app name\n    return cleaned.replace(/[^\\x00-\\x7F]/g, '') || DEFAULT_APP_NAME;\n}\n\nfunction sanitizeOptions(options) {\n    options.name = sanitizeFilename(options.name);\n    return options;\n}\n\nexport default optionsFactory;\n"],"sourceRoot":"/source/"}