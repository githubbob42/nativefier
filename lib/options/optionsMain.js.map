{"version":3,"sources":["options/optionsMain.js"],"names":["inpOptions","options","dir","name","appVersion","buildVersion","appCopyright","versionString","win32metadata","ProductName","InternalName","FileDescription","targetUrl","platform","inferPlatform","arch","inferArch","electronVersion","nativefierVersion","version","out","process","cwd","overwrite","asar","conceal","icon","counter","width","height","minWidth","minHeight","maxWidth","maxHeight","showMenuBar","fastQuit","userAgent","ignoreCertificate","ignoreGpuBlacklist","enableEs3Apis","insecure","flashPluginDir","flashPath","flash","diskCacheSize","inject","ignore","fullScreen","maximize","hideWindowFrame","verbose","disableContextMenu","disableDevTools","crashReporter","tmpdir","zoom","internalUrls","singleInstance","setLevel","honest","toLowerCase"],"mappings":"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","file":"optionsMain.js","sourcesContent":["import log from 'loglevel';\n\nimport inferOs from './../infer/inferOs';\nimport normalizeUrl from './normalizeUrl';\nimport packageJson from './../../package.json';\nimport { ELECTRON_VERSION, PLACEHOLDER_APP_DIR } from './../constants';\nimport asyncConfig from './asyncConfig';\n\nconst { inferPlatform, inferArch } = inferOs;\n\n/**\n * Extracts only desired keys from inpOptions and augments it with defaults\n * @param {Object} inpOptions\n * @returns {Promise}\n */\nexport default function (inpOptions) {\n  const options = {\n    dir: PLACEHOLDER_APP_DIR,\n    name: inpOptions.name,\n    'app-version': inpOptions.appVersion,\n    'build-version': inpOptions.buildVersion,\n    'app-copyright': inpOptions.appCopyright,\n    'version-string': inpOptions.versionString,\n    win32metadata: inpOptions.win32metadata || {\n      ProductName: inpOptions.name,\n      InternalName: inpOptions.name,\n      FileDescription: inpOptions.name,\n    },\n    targetUrl: normalizeUrl(inpOptions.targetUrl),\n    platform: inpOptions.platform || inferPlatform(),\n    arch: inpOptions.arch || inferArch(),\n    electronVersion: inpOptions.electronVersion || ELECTRON_VERSION,\n    nativefierVersion: packageJson.version,\n    out: inpOptions.out || process.cwd(),\n    overwrite: inpOptions.overwrite,\n    asar: inpOptions.conceal || false,\n    icon: inpOptions.icon,\n    counter: inpOptions.counter || false,\n    width: inpOptions.width || 1280,\n    height: inpOptions.height || 800,\n    minWidth: inpOptions.minWidth,\n    minHeight: inpOptions.minHeight,\n    maxWidth: inpOptions.maxWidth,\n    maxHeight: inpOptions.maxHeight,\n    showMenuBar: inpOptions.showMenuBar || false,\n    fastQuit: inpOptions.fastQuit || false,\n    userAgent: inpOptions.userAgent,\n    ignoreCertificate: inpOptions.ignoreCertificate || false,\n    ignoreGpuBlacklist: inpOptions.ignoreGpuBlacklist || false,\n    enableEs3Apis: inpOptions.enableEs3Apis || false,\n    insecure: inpOptions.insecure || false,\n    flashPluginDir: inpOptions.flashPath || inpOptions.flash || null,\n    diskCacheSize: inpOptions.diskCacheSize || null,\n    inject: inpOptions.inject || null,\n    ignore: 'src',\n    fullScreen: inpOptions.fullScreen || false,\n    maximize: inpOptions.maximize || false,\n    hideWindowFrame: inpOptions.hideWindowFrame,\n    verbose: inpOptions.verbose,\n    disableContextMenu: inpOptions.disableContextMenu,\n    disableDevTools: inpOptions.disableDevTools,\n    crashReporter: inpOptions.crashReporter,\n    // workaround for electron-packager#375\n    tmpdir: false,\n    zoom: inpOptions.zoom || 1.0,\n    internalUrls: inpOptions.internalUrls || null,\n    singleInstance: inpOptions.singleInstance || false,\n  };\n\n  if (options.verbose) {\n    log.setLevel('trace');\n  } else {\n    log.setLevel('error');\n  }\n\n  if (options.flashPluginDir) {\n    options.insecure = true;\n  }\n\n  if (inpOptions.honest) {\n    options.userAgent = null;\n  }\n\n  if (options.platform.toLowerCase() === 'windows') {\n    options.platform = 'win32';\n  }\n\n  if (options.platform.toLowerCase() === 'osx' || options.platform.toLowerCase() === 'mac') {\n    options.platform = 'darwin';\n  }\n\n  if (options.width > options.maxWidth) {\n    options.width = options.maxWidth;\n  }\n\n  if (options.height > options.maxHeight) {\n    options.height = options.maxHeight;\n  }\n\n  return asyncConfig(options);\n}\n\n"]}