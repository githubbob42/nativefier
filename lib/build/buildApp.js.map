{"version":3,"sources":["build/buildApp.js"],"names":["copy","ncp","buildApp","src","dest","options","callback","appArgs","selectAppArgs","error","writeFileSync","join","JSON","stringify","maybeCopyScripts","inject","catch","console","warn","then","changeAppPackageJsonName","name","targetUrl","srcs","Promise","resolve","promises","map","reject","existsSync","destFileName","extname","all","appPath","url","packageJsonPath","packageJson","parse","readFileSync","normalizeAppName","appCopyright","appVersion","buildVersion","win32metadata","counter","width","height","minWidth","minHeight","maxWidth","maxHeight","showMenuBar","fastQuit","userAgent","nativefierVersion","ignoreCertificate","insecure","flashPluginDir","fullScreen","hideWindowFrame","maximize","disableContextMenu","disableDevTools","zoom","internalUrls","appName","hash","createHash","update","postFixHash","digest","substring","normalized","kebabCase","toLowerCase"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO,cAAIC,GAAjB;;AAEA;;;;;;;;;AASA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgD;AAC5C,QAAMC,UAAUC,cAAcH,OAAd,CAAhB;AACAL,SAAKG,GAAL,EAAUC,IAAV,EAAgB,iBAAS;AACrB,YAAIK,KAAJ,EAAW;AACPH,6DAA+CG,KAA/C;AACA;AACH;;AAED,qBAAGC,aAAH,CAAiB,eAAKC,IAAL,CAAUP,IAAV,EAAgB,kBAAhB,CAAjB,EAAsDQ,KAAKC,SAAL,CAAeN,OAAf,CAAtD;;AAEAO,yBAAiBT,QAAQU,MAAzB,EAAiCX,IAAjC,EACKY,KADL,CACW,iBAAS;AACZC,oBAAQC,IAAR,CAAaT,KAAb;AACH,SAHL,EAIKU,IAJL,CAIU,YAAM;AACRC,qCAAyBhB,IAAzB,EAA+BG,QAAQc,IAAvC,EAA6Cd,QAAQe,SAArD;AACAhB;AACH,SAPL;AAQH,KAhBD;AAiBH;;AAED,SAASQ,gBAAT,CAA0BS,IAA1B,EAAgCnB,IAAhC,EAAsC;AAClC,QAAI,CAACmB,IAAL,EAAW;AACP,eAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC1BC;AACH,SAFM,CAAP;AAGH;AACD,QAAMC,WAAWH,KAAKI,GAAL,CAAS,eAAO;AAC7B,eAAO,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACpC,gBAAI,CAAC,aAAGC,UAAH,CAAc1B,GAAd,CAAL,EAAyB;AACrByB,uBAAO,+CAAP;AACA;AACH;;AAED,gBAAIE,qBAAJ;AACA,gBAAI,eAAKC,OAAL,CAAa5B,GAAb,MAAsB,KAA1B,EAAiC;AAC7B2B,+BAAe,WAAf;AACH,aAFD,MAEO,IAAI,eAAKC,OAAL,CAAa5B,GAAb,MAAsB,MAA1B,EAAkC;AACrC2B,+BAAe,YAAf;AACH,aAFM,MAEA;AACHL;AACA;AACH;;AAEDzB,iBAAKG,GAAL,EAAU,eAAKQ,IAAL,CAAUP,IAAV,EAAgB,QAAhB,EAA0B0B,YAA1B,CAAV,EAAmD,iBAAS;AACxD,oBAAIrB,KAAJ,EAAW;AACPmB,+DAAyCnB,KAAzC;AACA;AACH;AACDgB;AACH,aAND;AAOH,SAvBM,CAAP;AAwBH,KAzBgB,CAAjB;;AA2BA,WAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACpCJ,gBAAQQ,GAAR,CAAYN,QAAZ,EACKP,IADL,CACU,YAAM;AACRM;AACH,SAHL,EAIKT,KAJL,CAIW,iBAAS;AACZY,mBAAOnB,KAAP;AACH,SANL;AAOH,KARM,CAAP;AASH;;AAED,SAASW,wBAAT,CAAkCa,OAAlC,EAA2CZ,IAA3C,EAAiDa,GAAjD,EAAsD;AAClD,QAAMC,kBAAkB,eAAKxB,IAAL,CAAUsB,OAAV,EAAmB,eAAnB,CAAxB;AACA,QAAMG,cAAcxB,KAAKyB,KAAL,CAAW,aAAGC,YAAH,CAAgBH,eAAhB,CAAX,CAApB;AACAC,gBAAYf,IAAZ,GAAmBkB,iBAAiBlB,IAAjB,EAAuBa,GAAvB,CAAnB;AACA,iBAAGxB,aAAH,CAAiByB,eAAjB,EAAkCvB,KAAKC,SAAL,CAAeuB,WAAf,CAAlC;AACH;;AAED;;;;;AAKA,SAAS5B,aAAT,CAAuBH,OAAvB,EAAgC;AAC5B,WAAO;AACHmC,sBAAcnC,QAAQ,eAAR,CADX;AAEHoC,oBAAYpC,QAAQ,aAAR,CAFT;AAGHqC,sBAAcrC,QAAQ,eAAR,CAHX;AAIHsC,uBAAetC,QAAQsC,aAJpB;AAKH,0BAAkBtC,QAAQ,gBAAR,CALf;AAMHgB,cAAMhB,QAAQgB,IANX;AAOHC,mBAAWjB,QAAQiB,SAPhB;AAQHsB,iBAASvC,QAAQuC,OARd;AASHC,eAAOxC,QAAQwC,KATZ;AAUHC,gBAAQzC,QAAQyC,MAVb;AAWHC,kBAAU1C,QAAQ0C,QAXf;AAYHC,mBAAW3C,QAAQ2C,SAZhB;AAaHC,kBAAU5C,QAAQ4C,QAbf;AAcHC,mBAAW7C,QAAQ6C,SAdhB;AAeHC,qBAAa9C,QAAQ8C,WAflB;AAgBHC,kBAAU/C,QAAQ+C,QAhBf;AAiBHC,mBAAWhD,QAAQgD,SAjBhB;AAkBHC,2BAAmBjD,QAAQiD,iBAlBxB;AAmBHC,2BAAmBlD,QAAQkD,iBAnBxB;AAoBHC,kBAAUnD,QAAQmD,QApBf;AAqBHC,wBAAgBpD,QAAQoD,cArBrB;AAsBHC,oBAAYrD,QAAQqD,UAtBjB;AAuBHC,yBAAiBtD,QAAQsD,eAvBtB;AAwBHC,kBAAUvD,QAAQuD,QAxBf;AAyBHC,4BAAoBxD,QAAQwD,kBAzBzB;AA0BHC,yBAAiBzD,QAAQyD,eA1BtB;AA2BHC,cAAM1D,QAAQ0D,IA3BX;AA4BHC,sBAAc3D,QAAQ2D;AA5BnB,KAAP;AA8BH;;AAED,SAASzB,gBAAT,CAA0B0B,OAA1B,EAAmC/B,GAAnC,EAAwC;AACpC;AACA,QAAIgC,OAAO,iBAAOC,UAAP,CAAkB,KAAlB,CAAX;AACAD,SAAKE,MAAL,CAAYlC,GAAZ;AACA,QAAMmC,cAAcH,KAAKI,MAAL,CAAY,KAAZ,EAAmBC,SAAnB,CAA6B,CAA7B,EAAgC,CAAhC,CAApB;AACA,QAAMC,aAAa,iBAAEC,SAAF,CAAYR,QAAQS,WAAR,EAAZ,CAAnB;AACA,WAAUF,UAAV,oBAAmCH,WAAnC;AACH;;kBAEcnE,Q","file":"build/buildApp.js","sourcesContent":["import fs from 'fs';\nimport crypto from 'crypto';\nimport _ from 'lodash';\nimport path from 'path';\nimport ncp from 'ncp';\n\nconst copy = ncp.ncp;\n\n/**\n * Creates a temporary directory and copies the './app folder' inside, and adds a text file with the configuration\n * for the single page app.\n *\n * @param {string} src\n * @param {string} dest\n * @param {{}} options\n * @param callback\n */\nfunction buildApp(src, dest, options, callback) {\n    const appArgs = selectAppArgs(options);\n    copy(src, dest, error => {\n        if (error) {\n            callback(`Error Copying temporary directory: ${error}`);\n            return;\n        }\n\n        fs.writeFileSync(path.join(dest, '/nativefier.json'), JSON.stringify(appArgs));\n\n        maybeCopyScripts(options.inject, dest)\n            .catch(error => {\n                console.warn(error);\n            })\n            .then(() => {\n                changeAppPackageJsonName(dest, appArgs.name, appArgs.targetUrl);\n                callback();\n            });\n    });\n}\n\nfunction maybeCopyScripts(srcs, dest) {\n    if (!srcs) {\n        return new Promise(resolve => {\n            resolve();\n        });\n    }\n    const promises = srcs.map(src => {\n        return new Promise((resolve, reject) => {\n            if (!fs.existsSync(src)) {\n                reject('Error copying injection files: file not found');\n                return;\n            }\n\n            let destFileName;\n            if (path.extname(src) === '.js') {\n                destFileName = 'inject.js';\n            } else if (path.extname(src) === '.css') {\n                destFileName = 'inject.css';\n            } else {\n                resolve();\n                return;\n            }\n\n            copy(src, path.join(dest, 'inject', destFileName), error => {\n                if (error) {\n                    reject(`Error Copying injection files: ${error}`);\n                    return;\n                }\n                resolve();\n            });\n        });\n    });\n\n    return new Promise((resolve, reject) => {\n        Promise.all(promises)\n            .then(() => {\n                resolve();\n            })\n            .catch(error => {\n                reject(error);\n            });\n    });\n}\n\nfunction changeAppPackageJsonName(appPath, name, url) {\n    const packageJsonPath = path.join(appPath, '/package.json');\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath));\n    packageJson.name = normalizeAppName(name, url);\n    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson));\n}\n\n/**\n * Only picks certain app args to pass to nativefier.json\n * @param options\n * @returns {{app-copyright: (*|string), app-version: (*|string), build-version: (*|string), win32metadata: (object|*), version-string: (object|*), name: (*|string), targetUrl: (string|*), counter: *, width: *, height: *, showMenuBar: *, userAgent: *, nativefierVersion: *, insecure: *, disableWebSecurity: *}}\n */\nfunction selectAppArgs(options) {\n    return {\n        appCopyright: options['app-copyright'],\n        appVersion: options['app-version'],\n        buildVersion: options['build-version'],\n        win32metadata: options.win32metadata,\n        'version-string': options['version-string'],\n        name: options.name,\n        targetUrl: options.targetUrl,\n        counter: options.counter,\n        width: options.width,\n        height: options.height,\n        minWidth: options.minWidth,\n        minHeight: options.minHeight,\n        maxWidth: options.maxWidth,\n        maxHeight: options.maxHeight,\n        showMenuBar: options.showMenuBar,\n        fastQuit: options.fastQuit,\n        userAgent: options.userAgent,\n        nativefierVersion: options.nativefierVersion,\n        ignoreCertificate: options.ignoreCertificate,\n        insecure: options.insecure,\n        flashPluginDir: options.flashPluginDir,\n        fullScreen: options.fullScreen,\n        hideWindowFrame: options.hideWindowFrame,\n        maximize: options.maximize,\n        disableContextMenu: options.disableContextMenu,\n        disableDevTools: options.disableDevTools,\n        zoom: options.zoom,\n        internalUrls: options.internalUrls\n    };\n}\n\nfunction normalizeAppName(appName, url) {\n    // use a simple 3 byte random string to prevent collision\n    let hash = crypto.createHash('md5');\n    hash.update(url);\n    const postFixHash = hash.digest('hex').substring(0, 6);\n    const normalized = _.kebabCase(appName.toLowerCase());\n    return `${normalized}-nativefier-${postFixHash}`;\n}\n\nexport default buildApp;\n"],"sourceRoot":"/source/"}