{"version":3,"sources":["build/iconBuild.js"],"names":["isOSX","convertToPng","convertToIco","convertToIcns","iconBuild","options","callback","returnCallback","icon","platform","iconIsIco","then","outPath","catch","warn","error","iconIsPng","iconIsIcns","iconPath","extname"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEOA,K,qBAAAA,K;IACAC,Y,8BAAAA,Y;IAAcC,Y,8BAAAA,Y;IAAcC,a,8BAAAA,a;;AAEnC;;;;;;AAMA;;;;;;;;AAOA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,QAA5B,EAAsC;;AAElC,QAAMC,iBAAiB,SAAjBA,cAAiB,GAAM;AACzBD,iBAAS,IAAT,EAAeD,OAAf;AACH,KAFD;;AAIA,QAAI,CAACA,QAAQG,IAAb,EAAmB;AACfD;AACA;AACH;;AAED,QAAIF,QAAQI,QAAR,KAAqB,OAAzB,EAAkC;AAC9B,YAAIC,UAAUL,QAAQG,IAAlB,CAAJ,EAA6B;AACzBD;AACA;AACH;;AAEDL,qBAAaG,QAAQG,IAArB,EACKG,IADL,CACU,mBAAW;AACbN,oBAAQG,IAAR,GAAeI,OAAf;AACAL;AACH,SAJL,EAKKM,KALL,CAKW,iBAAS;AACZ,+BAAIC,IAAJ,CAAS,kCAAT,EAA6CC,KAA7C;AACAR;AACH,SARL;AASA;AACH;;AAED,QAAIF,QAAQI,QAAR,KAAqB,OAAzB,EAAkC;AAC9B,YAAIO,UAAUX,QAAQG,IAAlB,CAAJ,EAA6B;AACzBD;AACA;AACH;;AAEDN,qBAAaI,QAAQG,IAArB,EACKG,IADL,CACU,mBAAW;AACbN,oBAAQG,IAAR,GAAeI,OAAf;AACAL;AACH,SAJL,EAKKM,KALL,CAKW,iBAAS;AACZ,+BAAIC,IAAJ,CAAS,kCAAT,EAA6CC,KAA7C;AACAR;AACH,SARL;AASA;AACH;;AAED,QAAIU,WAAWZ,QAAQG,IAAnB,CAAJ,EAA8B;AAC1BD;AACA;AACH;;AAED,QAAI,CAACP,OAAL,EAAc;AACV,2BAAIc,IAAJ,CAAS,wEAAT;AACAP;AACA;AACH;;AAEDJ,kBAAcE,QAAQG,IAAtB,EACKG,IADL,CACU,mBAAW;AACbN,gBAAQG,IAAR,GAAeI,OAAf;AACAL;AACH,KAJL,EAKKM,KALL,CAKW,iBAAS;AACZ,2BAAIC,IAAJ,CAAS,mCAAT,EAA8CC,KAA9C;AACAR;AACH,KARL;AASH;;AAED,SAASG,SAAT,CAAmBQ,QAAnB,EAA6B;AACzB,WAAO,eAAKC,OAAL,CAAaD,QAAb,MAA2B,MAAlC;AACH;;AAED,SAASF,SAAT,CAAmBE,QAAnB,EAA6B;AACzB,WAAO,eAAKC,OAAL,CAAaD,QAAb,MAA2B,MAAlC;AACH;;AAED,SAASD,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,WAAO,eAAKC,OAAL,CAAaD,QAAb,MAA2B,OAAlC;AACH;;kBAEcd,S","file":"build/iconBuild.js","sourcesContent":["import path from 'path';\nimport log from 'loglevel';\nimport helpers from './../helpers/helpers';\nimport iconShellHelpers from './../helpers/iconShellHelpers';\n\nconst {isOSX} = helpers;\nconst {convertToPng, convertToIco, convertToIcns} = iconShellHelpers;\n\n/**\n * @callback augmentIconsCallback\n * @param error\n * @param options\n */\n\n/**\n * Will check and convert a `.png` to `.icns` if necessary and augment\n * options.icon with the result\n *\n * @param options will need options.platform and options.icon\n * @param {augmentIconsCallback} callback\n */\nfunction iconBuild(options, callback) {\n\n    const returnCallback = () => {\n        callback(null, options);\n    };\n\n    if (!options.icon) {\n        returnCallback();\n        return;\n    }\n\n    if (options.platform === 'win32') {\n        if (iconIsIco(options.icon)) {\n            returnCallback();\n            return;\n        }\n\n        convertToIco(options.icon)\n            .then(outPath => {\n                options.icon = outPath;\n                returnCallback();\n            })\n            .catch(error => {\n                log.warn('Skipping icon conversion to .ico', error);\n                returnCallback();\n            });\n        return;\n    }\n\n    if (options.platform === 'linux') {\n        if (iconIsPng(options.icon)) {\n            returnCallback();\n            return;\n        }\n\n        convertToPng(options.icon)\n            .then(outPath => {\n                options.icon = outPath;\n                returnCallback();\n            })\n            .catch(error => {\n                log.warn('Skipping icon conversion to .png', error);\n                returnCallback();\n            });\n        return;\n    }\n\n    if (iconIsIcns(options.icon)) {\n        returnCallback();\n        return;\n    }\n\n    if (!isOSX()) {\n        log.warn('Skipping icon conversion to .icns, conversion is only supported on OSX');\n        returnCallback();\n        return;\n    }\n\n    convertToIcns(options.icon)\n        .then(outPath => {\n            options.icon = outPath;\n            returnCallback();\n        })\n        .catch(error => {\n            log.warn('Skipping icon conversion to .icns', error);\n            returnCallback();\n        });\n}\n\nfunction iconIsIco(iconPath) {\n    return path.extname(iconPath) === '.ico';\n}\n\nfunction iconIsPng(iconPath) {\n    return path.extname(iconPath) === '.png';\n}\n\nfunction iconIsIcns(iconPath) {\n    return path.extname(iconPath) === '.icns';\n}\n\nexport default iconBuild;\n"],"sourceRoot":"/source/"}