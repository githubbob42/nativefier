{"version":3,"sources":["build/buildMain.js"],"names":["copy","ncp","isWindows","getAppPath","appPathArray","length","warn","maybeNoIconOption","options","packageOptions","JSON","parse","stringify","platform","sync","icon","maybeCopyIcons","appPath","callback","destIconPath","join","destFileName","extname","error","buildMain","inpOptions","Object","assign","tmpObj","dirSync","unsafeCleanup","tmpPath","name","packagerConsole","progress","waterfall","tick","then","result","catch","dir","newOptions","optionsWithIcon","override","restore","playback"],"mappings":"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","file":"buildMain.js","sourcesContent":["import path from 'path';\nimport packager from 'electron-packager';\nimport tmp from 'tmp';\nimport ncp from 'ncp';\nimport async from 'async';\nimport hasBinary from 'hasbin';\nimport log from 'loglevel';\nimport DishonestProgress from './../helpers/dishonestProgress';\nimport optionsFactory from './../options/optionsMain';\nimport iconBuild from './iconBuild';\nimport helpers from './../helpers/helpers';\nimport PackagerConsole from './../helpers/packagerConsole';\nimport buildApp from './buildApp';\n\nconst copy = ncp.ncp;\nconst isWindows = helpers.isWindows;\n\n/**\n * Checks the app path array to determine if the packaging was completed successfully\n * @param appPathArray Result from electron-packager\n * @returns {*}\n */\nfunction getAppPath(appPathArray) {\n  if (appPathArray.length === 0) {\n    // directory already exists, --overwrite is not set\n    // exit here\n    return null;\n  }\n\n  if (appPathArray.length > 1) {\n    log.warn('Warning: This should not be happening, packaged app path contains more than one element:', appPathArray);\n  }\n\n  return appPathArray[0];\n}\n\n/**\n * Removes the `icon` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoIconOption(options) {\n  const packageOptions = JSON.parse(JSON.stringify(options));\n  if (options.platform === 'win32' && !isWindows()) {\n    if (!hasBinary.sync('wine')) {\n      log.warn('Wine is required to set the icon for a Windows app when packaging on non-windows platforms');\n      packageOptions.icon = null;\n    }\n  }\n  return packageOptions;\n}\n\n/**\n * For windows and linux, we have to copy over the icon to the resources/app folder, which the\n * BrowserWindow is hard coded to read the icon from\n * @param {{}} options\n * @param {string} appPath\n * @param callback\n */\nfunction maybeCopyIcons(options, appPath, callback) {\n  if (!options.icon) {\n    callback();\n    return;\n  }\n\n  if (options.platform === 'darwin') {\n    callback();\n    return;\n  }\n\n  // windows & linux\n  // put the icon file into the app\n  const destIconPath = path.join(appPath, 'resources/app');\n  const destFileName = `icon${path.extname(options.icon)}`;\n  copy(options.icon, path.join(destIconPath, destFileName), (error) => {\n    callback(error);\n  });\n}\n\n\n/**\n * @callback buildAppCallback\n * @param error\n * @param {string} appPath\n */\n\n/**\n *\n * @param {{}} inpOptions\n * @param {buildAppCallback} callback\n */\nfunction buildMain(inpOptions, callback) {\n  const options = Object.assign({}, inpOptions);\n\n  // pre process app\n\n  const tmpObj = tmp.dirSync({ unsafeCleanup: true });\n  const tmpPath = tmpObj.name;\n\n  // todo check if this is still needed on later version of packager\n  const packagerConsole = new PackagerConsole();\n\n  const progress = new DishonestProgress(5);\n\n  async.waterfall([\n    (callback) => {\n      progress.tick('inferring');\n      optionsFactory(options)\n        .then((result) => {\n          callback(null, result);\n        }).catch((error) => {\n          callback(error);\n        });\n    },\n    (options, callback) => {\n      progress.tick('copying');\n      buildApp(options.dir, tmpPath, options, (error) => {\n        if (error) {\n          callback(error);\n          return;\n        }\n        // Change the reference file for the Electron app to be the temporary path\n        const newOptions = Object.assign({}, options, { dir: tmpPath });\n        callback(null, newOptions);\n      });\n    },\n    (options, callback) => {\n      progress.tick('icons');\n      iconBuild(options, (error, optionsWithIcon) => {\n        callback(null, optionsWithIcon);\n      });\n    },\n    (options, callback) => {\n      progress.tick('packaging');\n      // maybe skip passing icon parameter to electron packager\n      const packageOptions = maybeNoIconOption(options);\n\n      packagerConsole.override();\n\n      packager(packageOptions, (error, appPathArray) => {\n        // restore console.error\n        packagerConsole.restore();\n\n        // pass options which still contains the icon to waterfall\n        callback(error, options, appPathArray);\n      });\n    },\n    (options, appPathArray, callback) => {\n      progress.tick('finalizing');\n      // somehow appPathArray is a 1 element array\n      const appPath = getAppPath(appPathArray);\n      if (!appPath) {\n        callback();\n        return;\n      }\n\n      maybeCopyIcons(options, appPath, (error) => {\n        callback(error, appPath);\n      });\n    },\n  ], (error, appPath) => {\n    packagerConsole.playback();\n    callback(error, appPath);\n  });\n}\n\nexport default buildMain;\n"]}