{"version":3,"sources":["build/buildMain.js"],"names":["copy","ncp","isWindows","getAppPath","appPathArray","length","warn","maybeNoIconOption","options","packageOptions","JSON","parse","stringify","platform","sync","icon","maybeCopyIcons","appPath","callback","destIconPath","join","destFileName","extname","error","removeInvalidOptions","param","maybeNoAppCopyrightOption","maybeNoBuildVersionOption","maybeNoAppVersionOption","maybeNoVersionStringOption","maybeNoWin32metadataOption","buildMain","inpOptions","Object","assign","tmpObj","dirSync","mode","unsafeCleanup","tmpPath","name","packagerConsole","progress","waterfall","cb","tick","then","result","catch","opts","dir","newOptions","optionsWithIcon","override","restore","playback"],"mappings":"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","file":"buildMain.js","sourcesContent":["import path from 'path';\nimport packager from 'electron-packager';\nimport tmp from 'tmp';\nimport ncp from 'ncp';\nimport async from 'async';\nimport hasBinary from 'hasbin';\nimport log from 'loglevel';\nimport DishonestProgress from './../helpers/dishonestProgress';\nimport optionsFactory from './../options/optionsMain';\nimport iconBuild from './iconBuild';\nimport helpers from './../helpers/helpers';\nimport PackagerConsole from './../helpers/packagerConsole';\nimport buildApp from './buildApp';\n\nconst copy = ncp.ncp;\nconst { isWindows } = helpers;\n\n/**\n * Checks the app path array to determine if the packaging was completed successfully\n * @param appPathArray Result from electron-packager\n * @returns {*}\n */\nfunction getAppPath(appPathArray) {\n  if (appPathArray.length === 0) {\n    // directory already exists, --overwrite is not set\n    // exit here\n    return null;\n  }\n\n  if (appPathArray.length > 1) {\n    log.warn('Warning: This should not be happening, packaged app path contains more than one element:', appPathArray);\n  }\n\n  return appPathArray[0];\n}\n\n/**\n * Removes the `icon` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoIconOption(options) {\n  const packageOptions = JSON.parse(JSON.stringify(options));\n  if (options.platform === 'win32' && !isWindows()) {\n    if (!hasBinary.sync('wine')) {\n      log.warn('Wine is required to set the icon for a Windows app when packaging on non-windows platforms');\n      packageOptions.icon = null;\n    }\n  }\n  return packageOptions;\n}\n\n/**\n * For windows and linux, we have to copy over the icon to the resources/app folder, which the\n * BrowserWindow is hard coded to read the icon from\n * @param {{}} options\n * @param {string} appPath\n * @param callback\n */\nfunction maybeCopyIcons(options, appPath, callback) {\n  if (!options.icon) {\n    callback();\n    return;\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    callback();\n    return;\n  }\n\n  // windows & linux\n  // put the icon file into the app\n  const destIconPath = path.join(appPath, 'resources/app');\n  const destFileName = `icon${path.extname(options.icon)}`;\n  copy(options.icon, path.join(destIconPath, destFileName), (error) => {\n    callback(error);\n  });\n}\n\n/**\n * Removes invalid parameters from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction removeInvalidOptions(options, param) {\n  const packageOptions = JSON.parse(JSON.stringify(options));\n  if (options.platform === 'win32' && !isWindows()) {\n    if (!hasBinary.sync('wine')) {\n      log.warn(`Wine is required to use \"${param}\" option for a Windows app when packaging on non-windows platforms`);\n      packageOptions[param] = null;\n    }\n  }\n  return packageOptions;\n}\n\n/**\n * Removes the `appCopyright` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoAppCopyrightOption(options) {\n  return removeInvalidOptions(options, 'appCopyright');\n}\n\n/**\n * Removes the `buildVersion` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoBuildVersionOption(options) {\n  return removeInvalidOptions(options, 'buildVersion');\n}\n\n/**\n * Removes the `appVersion` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoAppVersionOption(options) {\n  return removeInvalidOptions(options, 'appVersion');\n}\n\n/**\n * Removes the `versionString` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoVersionStringOption(options) {\n  return removeInvalidOptions(options, 'versionString');\n}\n\n/**\n * Removes the `win32metadata` parameter from options if building for Windows while not on Windows\n * and Wine is not installed\n * @param options\n */\nfunction maybeNoWin32metadataOption(options) {\n  return removeInvalidOptions(options, 'win32metadata');\n}\n\n/**\n * @callback buildAppCallback\n * @param error\n * @param {string} appPath\n */\n\n/**\n *\n * @param {{}} inpOptions\n * @param {buildAppCallback} callback\n */\nfunction buildMain(inpOptions, callback) {\n  const options = Object.assign({}, inpOptions);\n\n  // pre process app\n  const tmpObj = tmp.dirSync({ mode: '0755', unsafeCleanup: true });\n  const tmpPath = tmpObj.name;\n\n  // todo check if this is still needed on later version of packager\n  const packagerConsole = new PackagerConsole();\n\n  const progress = new DishonestProgress(5);\n\n  async.waterfall([\n    (cb) => {\n      progress.tick('inferring');\n      optionsFactory(options)\n        .then((result) => {\n          cb(null, result);\n        }).catch((error) => {\n          cb(error);\n        });\n    },\n    (opts, cb) => {\n      progress.tick('copying');\n      buildApp(opts.dir, tmpPath, opts, (error) => {\n        if (error) {\n          cb(error);\n          return;\n        }\n        // Change the reference file for the Electron app to be the temporary path\n        const newOptions = Object.assign({}, opts, { dir: tmpPath });\n        cb(null, newOptions);\n      });\n    },\n    (opts, cb) => {\n      progress.tick('icons');\n      iconBuild(opts, (error, optionsWithIcon) => {\n        cb(null, optionsWithIcon);\n      });\n    },\n    (opts, cb) => {\n      progress.tick('packaging');\n      // maybe skip passing icon parameter to electron packager\n      let packageOptions = maybeNoIconOption(opts);\n      // maybe skip passing other parameters to electron packager\n      packageOptions = maybeNoAppCopyrightOption(packageOptions);\n      packageOptions = maybeNoAppVersionOption(packageOptions);\n      packageOptions = maybeNoBuildVersionOption(packageOptions);\n      packageOptions = maybeNoVersionStringOption(packageOptions);\n      packageOptions = maybeNoWin32metadataOption(packageOptions);\n\n      packagerConsole.override();\n\n      packager(packageOptions, (error, appPathArray) => {\n        // restore console.error\n        packagerConsole.restore();\n\n        // pass options which still contains the icon to waterfall\n        cb(error, opts, appPathArray);\n      });\n    },\n    (opts, appPathArray, cb) => {\n      progress.tick('finalizing');\n      // somehow appPathArray is a 1 element array\n      const appPath = getAppPath(appPathArray);\n      if (!appPath) {\n        cb();\n        return;\n      }\n\n      maybeCopyIcons(opts, appPath, (error) => {\n        cb(error, appPath);\n      });\n    },\n  ], (error, appPath) => {\n    packagerConsole.playback();\n    callback(error, appPath);\n  });\n}\n\nexport default buildMain;\n"]}