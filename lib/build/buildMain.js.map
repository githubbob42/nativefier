{"version":3,"sources":["build/buildMain.js"],"names":["copy","ncp","isWindows","buildMain","options","callback","tmpObj","dirSync","unsafeCleanup","tmpPath","name","packagerConsole","progress","waterfall","tick","dir","error","optionsWithIcon","packageOptions","maybeNoIconOption","maybeNoAppCopyrightOption","maybeNoAppVersionOption","maybeNoBuildVersionOption","maybeNoVersionStringOption","maybeNoWin32metadataOption","override","appPathArray","restore","appPath","getAppPath","maybeCopyIcons","playback","length","warn","JSON","parse","stringify","platform","sync","icon","win32metadata","destIconPath","join","destFileName","extname"],"mappings":"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","file":"build/buildMain.js","sourcesContent":["import path from 'path';\nimport packager from 'electron-packager';\nimport tmp from 'tmp';\nimport ncp from 'ncp';\nimport async from 'async';\nimport hasBinary from 'hasbin';\nimport log from 'loglevel';\nimport DishonestProgress from './../helpers/dishonestProgress';\nimport optionsFactory from './../options/optionsMain';\nimport iconBuild from './iconBuild';\nimport helpers from './../helpers/helpers';\nimport PackagerConsole from './../helpers/packagerConsole';\nimport buildApp from './buildApp';\n\nconst copy = ncp.ncp;\nconst isWindows = helpers.isWindows;\n\n/**\n * @callback buildAppCallback\n * @param error\n * @param {string} appPath\n */\n\n/**\n *\n * @param {{}} options\n * @param {buildAppCallback} callback\n */\nfunction buildMain(options, callback) {\n    // pre process app\n\n    const tmpObj = tmp.dirSync({unsafeCleanup: true});\n    const tmpPath = tmpObj.name;\n\n    // todo check if this is still needed on later version of packager\n    const packagerConsole = new PackagerConsole();\n\n    const progress = new DishonestProgress(5);\n\n    async.waterfall([\n        callback => {\n            progress.tick('inferring');\n            optionsFactory(options, callback);\n        },\n        (options, callback) => {\n            progress.tick('copying');\n            buildApp(options.dir, tmpPath, options, error => {\n                if (error) {\n                    callback(error);\n                    return;\n                }\n                // dir now correctly references the app folder to package\n                options.dir = tmpPath;\n                callback(null, options);\n            });\n        },\n        (options, callback) => {\n            progress.tick('icons');\n            iconBuild(options, (error, optionsWithIcon) => {\n                callback(null, optionsWithIcon);\n            });\n        },\n        (options, callback) => {\n            progress.tick('packaging');\n            // maybe skip passing icon parameter to electron packager\n            var packageOptions = maybeNoIconOption(options);\n            packageOptions = maybeNoAppCopyrightOption(packageOptions);\n            packageOptions = maybeNoAppVersionOption(packageOptions);\n            packageOptions = maybeNoBuildVersionOption(packageOptions);\n            packageOptions = maybeNoVersionStringOption(packageOptions);\n            packageOptions = maybeNoWin32metadataOption(packageOptions);\n\n            packagerConsole.override();\n\n            packager(packageOptions, (error, appPathArray) => {\n\n                // restore console.error\n                packagerConsole.restore();\n\n                // pass options which still contains the icon to waterfall\n                callback(error, options, appPathArray);\n            });\n        },\n        (options, appPathArray, callback) => {\n            progress.tick('finalizing');\n            // somehow appPathArray is a 1 element array\n            const appPath = getAppPath(appPathArray);\n            if (!appPath) {\n                callback();\n                return;\n            }\n\n            maybeCopyIcons(options, appPath, error => {\n                callback(error, appPath);\n            });\n        }\n    ], (error, appPath) => {\n        packagerConsole.playback();\n        callback(error, appPath);\n    });\n}\n\n/**\n * Checks the app path array to determine if the packaging was completed successfully\n * @param appPathArray Result from electron-packager\n * @returns {*}\n */\nfunction getAppPath(appPathArray) {\n    if (appPathArray.length === 0) {\n        // directory already exists, --overwrite is not set\n        // exit here\n        return null;\n    }\n\n    if (appPathArray.length > 1) {\n        log.warn('Warning: This should not be happening, packaged app path contains more than one element:', appPathArray);\n    }\n\n    return appPathArray[0];\n}\n\n/**\n * Removes the `icon` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoIconOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to set the icon for a Windows app when packaging on non-windows platforms');\n            packageOptions.icon = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * Removes the `app-copyright` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoAppCopyrightOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to use \"app-copyright\" option for a Windows app when packaging on non-windows platforms');\n            packageOptions['app-copyright'] = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * Removes the `build-version` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoBuildVersionOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to use \"build-version\" option for a Windows app when packaging on non-windows platforms');\n            packageOptions['build-version'] = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * Removes the `app-version` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoAppVersionOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to use \"app-version\" option for a Windows app when packaging on non-windows platforms');\n            packageOptions['app-version'] = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * Removes the `version-string` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoVersionStringOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to use \"version-string\" option for a Windows app when packaging on non-windows platforms');\n            packageOptions['version-string'] = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * Removes the `win32metadata` parameter from options if building for Windows while not on Windows and Wine is not installed\n * @param options\n */\nfunction maybeNoWin32metadataOption(options) {\n    const packageOptions = JSON.parse(JSON.stringify(options));\n    if (options.platform === 'win32' && !isWindows()) {\n        if (!hasBinary.sync('wine')) {\n            log.warn('Wine is required to use \"win32metadata\" option for a Windows app when packaging on non-windows platforms');\n            packageOptions.win32metadata = null;\n        }\n    }\n    return packageOptions;\n}\n\n/**\n * For windows and linux, we have to copy over the icon to the resources/app folder, which the\n * BrowserWindow is hard coded to read the icon from\n * @param {{}} options\n * @param {string} appPath\n * @param callback\n */\nfunction maybeCopyIcons(options, appPath, callback) {\n    if (!options.icon) {\n        callback();\n        return;\n    }\n\n    if (options.platform === 'darwin') {\n        callback();\n        return;\n    }\n\n    // windows & linux\n    // put the icon file into the app\n    const destIconPath = path.join(appPath, 'resources/app');\n    const destFileName = `icon${path.extname(options.icon)}`;\n    copy(options.icon, path.join(destIconPath, destFileName), error => {\n        callback(error);\n    });\n}\n\nexport default buildMain;\n"],"sourceRoot":"/source/"}