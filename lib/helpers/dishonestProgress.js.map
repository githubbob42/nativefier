{"version":3,"sources":["helpers/dishonestProgress.js"],"names":["DishonestProgress","total","tickParts","bar","complete","incomplete","width","clear","tickingPrevious","message","remainder","interval","prevRemainder","prevMessage","prevInterval","tick","task","clearInterval","realRemainder","curr","setInterval"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,iB;AACF,+BAAYC,KAAZ,EAAmB;AAAA;;AACf,aAAKC,SAAL,GAAiBD,QAAQ,EAAzB;;AAEA,aAAKE,GAAL,GAAW,uBAAgB,yBAAhB,EAA2C;AAClDC,sBAAU,GADwC;AAElDC,wBAAY,GAFsC;AAGlDJ,mBAAOA,QAAQ,KAAKC,SAH8B;AAIlDI,mBAAO,EAJ2C;AAKlDC,mBAAO;AAL2C,SAA3C,CAAX;;AAQA,aAAKC,eAAL,GAAuB;AACnBC,qBAAS,EADU;AAEnBC,uBAAW,CAFQ;AAGnBC,sBAAU;AAHS,SAAvB;AAKH;;;;6BAEIF,O,EAAS;AAAA;;AAAA,mCAEuE,KAAKD,eAF5E;AAAA,gBAEQI,aAFR,oBAEHF,SAFG;AAAA,gBAEgCG,WAFhC,oBAEuBJ,OAFvB;AAAA,gBAEuDK,YAFvD,oBAE6CH,QAF7C;;;AAIV,gBAAIC,aAAJ,EAAmB;AACf,qBAAKT,GAAL,CAASY,IAAT,CAAcH,aAAd,EAA6B;AACzBI,0BAAMH;AADmB,iBAA7B;AAGAI,8BAAcH,YAAd;AACH;;AAED,gBAAMI,gBAAgB,KAAKf,GAAL,CAASF,KAAT,GAAiB,KAAKE,GAAL,CAASgB,IAAhD;AACA,gBAAID,kBAAkB,KAAKhB,SAA3B,EAAsC;AAClC,qBAAKC,GAAL,CAASY,IAAT,CAAc,KAAKb,SAAnB,EAA8B;AAC1Bc,0BAAMP;AADoB,iBAA9B;AAGA;AACH;;AAED,iBAAKN,GAAL,CAASY,IAAT,CAAc;AACVC,sBAAMP;AADI,aAAd;;AAIA,iBAAKD,eAAL,GAAuB;AACnBC,yBAASA,OADU;AAEnBC,2BAAW,KAAKR,SAFG;AAGnBS,0BAAU;AAHS,aAAvB;;AAMA,iBAAKH,eAAL,CAAqBE,SAArB,IAAkC,CAAlC;;AAEA,iBAAKF,eAAL,CAAqBG,QAArB,GAAgCS,YAAY,YAAM;AAC9C,oBAAI,MAAKZ,eAAL,CAAqBE,SAArB,KAAmC,CAAvC,EAA0C;AACtCO,kCAAc,MAAKT,eAAL,CAAqBG,QAAnC;AACA;AACH;;AAED,sBAAKR,GAAL,CAASY,IAAT,CAAc;AACVC,0BAAMP;AADI,iBAAd;AAGA,sBAAKD,eAAL,CAAqBE,SAArB,IAAkC,CAAlC;AACH,aAV+B,EAU7B,GAV6B,CAAhC;AAYH;;;;;;kBAGUV,iB","file":"helpers/dishonestProgress.js","sourcesContent":["import ProgressBar from 'progress';\n\nclass DishonestProgress {\n    constructor(total) {\n        this.tickParts = total * 10;\n\n        this.bar = new ProgressBar('  :task [:bar] :percent', {\n            complete: '=',\n            incomplete: ' ',\n            total: total * this.tickParts,\n            width: 50,\n            clear: true\n        });\n\n        this.tickingPrevious = {\n            message: '',\n            remainder: 0,\n            interval: null\n        };\n    }\n\n    tick(message) {\n\n        const {remainder: prevRemainder, message: prevMessage, interval: prevInterval} = this.tickingPrevious;\n\n        if (prevRemainder) {\n            this.bar.tick(prevRemainder, {\n                task: prevMessage\n            });\n            clearInterval(prevInterval);\n        }\n\n        const realRemainder = this.bar.total - this.bar.curr;\n        if (realRemainder === this.tickParts) {\n            this.bar.tick(this.tickParts, {\n                task: message\n            });\n            return;\n        }\n\n        this.bar.tick({\n            task: message\n        });\n\n        this.tickingPrevious = {\n            message: message,\n            remainder: this.tickParts,\n            interval: null\n        };\n\n        this.tickingPrevious.remainder -= 1;\n\n        this.tickingPrevious.interval = setInterval(() => {\n            if (this.tickingPrevious.remainder === 1) {\n                clearInterval(this.tickingPrevious.interval);\n                return;\n            }\n\n            this.bar.tick({\n                task: message\n            });\n            this.tickingPrevious.remainder -= 1;\n        }, 200);\n\n    }\n}\n\nexport default DishonestProgress;\n"],"sourceRoot":"/source/"}