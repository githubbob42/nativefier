{"version":3,"sources":["helpers/helpers.js"],"names":["isOSX","platform","isWindows","downloadFile","fileUrl","get","responseType","then","response","data","ext","extname","allowedIconFormats","hasIdentify","sync","hasConvert","hasIconUtil","pngToIcns","pngToIco","icoToIcns","icoToPng","icnsToPng","icnsToIco","formats","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,KAAT,GAAiB;AACb,WAAO,aAAGC,QAAH,OAAkB,QAAzB;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB,WAAO,aAAGD,QAAH,OAAkB,OAAzB;AACH;;AAED,SAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,WAAO,gBAAMC,GAAN,CACHD,OADG,EACM;AACLE,sBAAc;AADT,KADN,EAIFC,IAJE,CAIG,UAASC,QAAT,EAAmB;AACrB,YAAI,CAACA,SAASC,IAAd,EAAoB;AAChB,mBAAO,IAAP;AACH;AACD,eAAO;AACHA,kBAAMD,SAASC,IADZ;AAEHC,iBAAK,eAAKC,OAAL,CAAaP,OAAb;AAFF,SAAP;AAIH,KAZE,CAAP;AAaH;;AAED,SAASQ,kBAAT,CAA4BX,QAA5B,EAAsC;AAClC,QAAMY,cAAc,iBAAUC,IAAV,CAAe,UAAf,CAApB;AACA,QAAMC,aAAa,iBAAUD,IAAV,CAAe,SAAf,CAAnB;AACA,QAAME,cAAc,iBAAUF,IAAV,CAAe,UAAf,CAApB;;AAEA,QAAMG,YAAYF,cAAcC,WAAhC;AACA,QAAME,WAAWH,UAAjB;AACA,QAAMI,YAAYF,aAAaJ,WAA/B;AACA,QAAMO,WAAWL,UAAjB;;AAEA;AACA,QAAMM,YAAY,KAAlB;AACA,QAAMC,YAAY,KAAlB;;AAEA,QAAMC,UAAU,EAAhB;;AAEA;AACA,QAAIrB,WAAJ,EAAiB;AACb,gBAAQD,QAAR;AACI,iBAAK,QAAL;AACIsB,wBAAQC,IAAR,CAAa,OAAb;AACA;AACJ,iBAAK,OAAL;AACID,wBAAQC,IAAR,CAAa,MAAb;AACA;AACJ,iBAAK,OAAL;AACID,wBAAQC,IAAR,CAAa,MAAb;AACA;AACJ;AACI,+EAA6DvB,QAA7D;AAXR;AAaA,eAAOsB,OAAP;AACH;;AAED,YAAQtB,QAAR;AACI,aAAK,QAAL;AACIsB,oBAAQC,IAAR,CAAa,OAAb;AACA,gBAAIP,SAAJ,EAAe;AACXM,wBAAQC,IAAR,CAAa,MAAb;AACH;AACD,gBAAIL,SAAJ,EAAe;AACXI,wBAAQC,IAAR,CAAa,MAAb;AACH;AACD;AACJ,aAAK,OAAL;AACID,oBAAQC,IAAR,CAAa,MAAb;AACA,gBAAIJ,QAAJ,EAAc;AACVG,wBAAQC,IAAR,CAAa,MAAb;AACH;AACD,gBAAIH,SAAJ,EAAe;AACXE,wBAAQC,IAAR,CAAa,OAAb;AACH;AACD;AACJ,aAAK,OAAL;AACID,oBAAQC,IAAR,CAAa,MAAb;AACA,gBAAIN,QAAJ,EAAc;AACVK,wBAAQC,IAAR,CAAa,MAAb;AACH;AACD,gBAAIF,SAAJ,EAAe;AACXC,wBAAQC,IAAR,CAAa,OAAb;AACH;AACD;AACJ;AACI,2EAA6DvB,QAA7D;AA7BR;AA+BA,WAAOsB,OAAP;AACH;;kBAEc;AACXvB,gBADW;AAEXE,wBAFW;AAGXC,8BAHW;AAIXS;AAJW,C","file":"helpers/helpers.js","sourcesContent":["import os from 'os';\nimport axios from 'axios';\nimport hasBinary from 'hasbin';\nimport path from 'path';\n\nfunction isOSX() {\n    return os.platform() === 'darwin';\n}\n\nfunction isWindows() {\n    return os.platform() === 'win32';\n}\n\nfunction downloadFile(fileUrl) {\n    return axios.get(\n        fileUrl, {\n            responseType: 'arraybuffer'\n        })\n        .then(function(response) {\n            if (!response.data) {\n                return null;\n            }\n            return {\n                data: response.data,\n                ext: path.extname(fileUrl)\n            };\n        });\n}\n\nfunction allowedIconFormats(platform) {\n    const hasIdentify = hasBinary.sync('identify');\n    const hasConvert = hasBinary.sync('convert');\n    const hasIconUtil = hasBinary.sync('iconutil');\n\n    const pngToIcns = hasConvert && hasIconUtil;\n    const pngToIco = hasConvert;\n    const icoToIcns = pngToIcns && hasIdentify;\n    const icoToPng = hasConvert;\n\n    // todo scripts for the following\n    const icnsToPng = false;\n    const icnsToIco = false;\n\n    const formats = [];\n\n    // todo shell scripting is not supported on windows, temporary override\n    if (isWindows()) {\n        switch (platform) {\n            case 'darwin':\n                formats.push('.icns');\n                break;\n            case 'linux':\n                formats.push('.png');\n                break;\n            case 'win32':\n                formats.push('.ico');\n                break;\n            default:\n                throw `function allowedIconFormats error: Unknown platform ${platform}`;\n        }\n        return formats;\n    }\n\n    switch (platform) {\n        case 'darwin':\n            formats.push('.icns');\n            if (pngToIcns) {\n                formats.push('.png');\n            }\n            if (icoToIcns) {\n                formats.push('.ico');\n            }\n            break;\n        case 'linux':\n            formats.push('.png');\n            if (icoToPng) {\n                formats.push('.ico');\n            }\n            if (icnsToPng) {\n                formats.push('.icns');\n            }\n            break;\n        case 'win32':\n            formats.push('.ico');\n            if (pngToIco) {\n                formats.push('.png');\n            }\n            if (icnsToIco) {\n                formats.push('.icns');\n            }\n            break;\n        default:\n            throw `function allowedIconFormats error: Unknown platform ${platform}`;\n    }\n    return formats;\n}\n\nexport default {\n    isOSX,\n    isWindows,\n    downloadFile,\n    allowedIconFormats\n};\n"],"sourceRoot":"/source/"}