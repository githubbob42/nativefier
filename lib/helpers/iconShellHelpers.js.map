{"version":3,"sources":["helpers/iconShellHelpers.js"],"names":["isWindows","isOSX","setGracefulCleanup","SCRIPT_PATHS","singleIco","join","__dirname","convertToPng","convertToIco","convertToIcns","iconShellHelper","shellScriptPath","icoSrc","dest","Promise","resolve","reject","exec","silent","exitCode","stdOut","stdError","getTmpDirPath","tempIconDirObj","dirSync","unsafeCleanup","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IACOA,S,qBAAAA,S;IAAWC,K,qBAAAA,K;;;AAElB,cAAIC,kBAAJ;;AAEA,IAAMC,eAAe;AACjBC,eAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,eAA9B,CADM;AAEjBC,kBAAc,eAAKF,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAFG;AAGjBE,kBAAc,eAAKH,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAHG;AAIjBG,mBAAe,eAAKJ,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,mBAA9B;AAJE,CAArB;;AAOA;;;;;;AAMA,SAASI,eAAT,CAAyBC,eAAzB,EAA0CC,MAA1C,EAAkDC,IAAlD,EAAwD;AACpD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIhB,WAAJ,EAAiB;AACbgB,mBAAO,0BAAP;AACA;AACH;;AAED,0BAAMC,IAAN,CAAcN,eAAd,SAAiCC,MAAjC,SAA2CC,IAA3C,EAAmD,EAACK,QAAQ,IAAT,EAAnD,EAAmE,UAACC,QAAD,EAAWC,MAAX,EAAmBC,QAAnB,EAAgC;AAC/F,gBAAIF,QAAJ,EAAc;AACVH,uBAAO;AACHI,4BAAQA,MADL;AAEHC,8BAAUA;AAFP,iBAAP;AAIA;AACH;;AAEDN,oBAAQF,IAAR;AACH,SAVD;AAWH,KAjBM,CAAP;AAkBH;;AAED,SAASS,aAAT,GAAyB;AACrB,QAAMC,iBAAiB,cAAIC,OAAJ,CAAY,EAACC,eAAe,IAAhB,EAAZ,CAAvB;AACA,WAAOF,eAAeG,IAAtB;AACH;;AAED;;;;;;AAMA,SAAStB,SAAT,CAAmBQ,MAAnB,EAA2B;AACvB,WAAOF,gBAAgBP,aAAaC,SAA7B,EAAwCQ,MAAxC,EAAmDU,eAAnD,eAAP;AACH;;AAED,SAASf,YAAT,CAAsBK,MAAtB,EAA8B;AAC1B,WAAOF,gBAAgBP,aAAaI,YAA7B,EAA2CK,MAA3C,EAAsDU,eAAtD,eAAP;AACH;;AAED,SAASd,YAAT,CAAsBI,MAAtB,EAA8B;AAC1B,WAAOF,gBAAgBP,aAAaK,YAA7B,EAA2CI,MAA3C,EAAsDU,eAAtD,eAAP;AACH;;AAED,SAASb,aAAT,CAAuBG,MAAvB,EAA+B;AAC3B,QAAI,CAACX,OAAL,EAAc;AACV,eAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,mBAAqBA,OAAO,4CAAP,CAArB;AAAA,SAAZ,CAAP;AACH;AACD,WAAON,gBAAgBP,aAAaM,aAA7B,EAA4CG,MAA5C,EAAuDU,eAAvD,gBAAP;AACH;;kBAEc;AACXlB,wBADW;AAEXG,8BAFW;AAGXC,8BAHW;AAIXC;AAJW,C","file":"helpers/iconShellHelpers.js","sourcesContent":["import shell from 'shelljs';\nimport path from 'path';\nimport tmp from 'tmp';\nimport helpers from './helpers';\nconst {isWindows, isOSX} = helpers;\n\ntmp.setGracefulCleanup();\n\nconst SCRIPT_PATHS = {\n    singleIco: path.join(__dirname, '../..', 'bin/singleIco'),\n    convertToPng: path.join(__dirname, '../..', 'bin/convertToPng'),\n    convertToIco: path.join(__dirname, '../..', 'bin/convertToIco'),\n    convertToIcns: path.join(__dirname, '../..', 'bin/convertToIcns')\n};\n\n/**\n * Executes a shell script with the form \"./pathToScript param1 param2\"\n * @param {string} shellScriptPath\n * @param {string} icoSrc input .ico\n * @param {string} dest has to be a .ico path\n */\nfunction iconShellHelper(shellScriptPath, icoSrc, dest) {\n    return new Promise((resolve, reject) => {\n        if (isWindows()) {\n            reject('OSX or Linux is required');\n            return;\n        }\n\n        shell.exec(`${shellScriptPath} ${icoSrc} ${dest}`, {silent: true}, (exitCode, stdOut, stdError) => {\n            if (exitCode) {\n                reject({\n                    stdOut: stdOut,\n                    stdError: stdError\n                });\n                return;\n            }\n\n            resolve(dest);\n        });\n    });\n}\n\nfunction getTmpDirPath() {\n    const tempIconDirObj = tmp.dirSync({unsafeCleanup: true});\n    return tempIconDirObj.name;\n}\n\n/**\n * Converts the ico to a temporary directory which will be cleaned up on process exit\n * @param {string} icoSrc path to a .ico file\n * @return {Promise}\n */\n\nfunction singleIco(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.singleIco, icoSrc, `${getTmpDirPath()}/icon.ico`);\n}\n\nfunction convertToPng(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.convertToPng, icoSrc, `${getTmpDirPath()}/icon.png`);\n}\n\nfunction convertToIco(icoSrc) {\n    return iconShellHelper(SCRIPT_PATHS.convertToIco, icoSrc, `${getTmpDirPath()}/icon.ico`);\n}\n\nfunction convertToIcns(icoSrc) {\n    if (!isOSX()) {\n        return new Promise((resolve, reject) => reject('OSX is required to convert to a .icns icon'));\n    }\n    return iconShellHelper(SCRIPT_PATHS.convertToIcns, icoSrc, `${getTmpDirPath()}/icon.icns`);\n}\n\nexport default {\n    singleIco,\n    convertToPng,\n    convertToIco,\n    convertToIcns\n};\n"],"sourceRoot":"/source/"}