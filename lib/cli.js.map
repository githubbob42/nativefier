{"version":3,"sources":["cli.js"],"names":["packageJson","require","collect","val","memo","push","main","module","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","parse","process","argv","slice","length","help","error","appPath","console","log"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport nativefier from './index';\n\nconst packageJson = require('./../package');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nif (require.main === module) {\n  program\n    .version(packageJson.version)\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', '\\'osx\\', \\'linux\\' or \\'windows\\'')\n    .option('-a, --arch <value>', '\\'ia32\\' or \\'x64\\' or \\'armv7l\\'')\n    .option('--app-version <value>', 'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.')\n    .option('--build-version <value>', 'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.')\n    .option('--app-copyright <value>', 'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X')\n    .option('-e, --electron-version <value>', 'electron version to package, without the \\'v\\', see https://github.com/atom/electron/releases')\n    .option('--no-overwrite', 'do not override output directory if it already exists, defaults to false')\n    .option('-c, --conceal', 'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/')\n    .option('--counter', 'if the target app should use a persistant counter badge in the dock (OSX only), defaults to false')\n    .option('-i, --icon <value>', 'the icon file to use as the icon for the app (should be a .icns file on OSX, .png for Windows and Linux)')\n    .option('--width <value>', 'set window default width, defaults to 1280px', parseInt)\n    .option('--height <value>', 'set window default height, defaults to 800px', parseInt)\n    .option('--min-width <value>', 'set window minimum width, defaults to 0px', parseInt)\n    .option('--min-height <value>', 'set window minimum height, defaults to 0px', parseInt)\n    .option('--max-width <value>', 'set window maximum width, default is no limit', parseInt)\n    .option('--max-height <value>', 'set window maximum height, default is no limit', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option('-f, --fast-quit', 'quit app after window close (OSX only), defaults to false')\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option('--honest', 'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser')\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--ignore-gpu-blacklist', 'allow WebGl apps to work on non supported graphics cards')\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option('--insecure', 'enable loading of insecure content, defaults to false')\n    .option('--flash', 'if flash should be enabled')\n    .option('--flash-path <value>', 'path to Chrome flash plugin, find it in `Chrome://plugins`')\n    .option('--disk-cache-size <value>', 'forces the maximum disk space (in bytes) to be used by the disk cache')\n    .option('--inject <value>', 'path to a CSS/JS file to be injected', collect, [])\n    .option('--full-screen', 'if the app should always be started in full screen')\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option('--zoom <value>', 'default zoom factor to use when the app is opened, defaults to 1.0', parseFloat)\n    .option('--internal-urls <value>', 'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)')\n    .option('--crash-reporter <value>', 'remote server URL to send crash reports')\n    .option('--single-instance', 'allow only a single instance of the application')\n    .parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n\n  nativefier(program, (error, appPath) => {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    console.log(`App built to ${appPath}`);\n  });\n}\n"]}