{"version":3,"sources":["cli.js"],"names":["packageJson","require","join","collect","val","memo","push","main","module","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","parse","process","argv","slice","length","help","error","appPath","console","log"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\n\nimport path from 'path';\nimport program from 'commander';\nimport nativefier from './index';\nconst packageJson = require(path.join('..', 'package'));\n\nfunction collect(val, memo) {\n    memo.push(val);\n    return memo;\n}\n\nif (require.main === module) {\n\n    program\n        .version(packageJson.version)\n        .arguments('<targetUrl> [dest]')\n        .action(function(targetUrl, appDir) {\n            program.targetUrl = targetUrl;\n            program.out = appDir;\n        })\n        .option('-n, --name <value>', 'app name')\n        .option('-p, --platform <value>', '\\'osx\\', \\'linux\\' or \\'windows\\'')\n        .option('-a, --arch <value>', '\\'ia32\\' or \\'x64\\'')\n        .option('--app-version <value>', 'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.')\n        .option('--build-version <value>', 'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.')\n        .option('--app-copyright <value>', 'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X')\n        .option('-e, --electron-version <value>', 'electron version to package, without the \\'v\\', see https://github.com/atom/electron/releases')\n        .option('--no-overwrite', 'do not override output directory if it already exists, defaults to false')\n        .option('-c, --conceal', 'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/')\n        .option('--counter', 'if the target app should use a persistant counter badge in the dock (OSX only), defaults to false')\n        .option('-i, --icon <value>', 'the icon file to use as the icon for the app (should be a .icns file on OSX, .png for Windows and Linux)')\n        .option('--width <value>', 'set window default width, defaults to 1280px', parseInt)\n        .option('--height <value>', 'set window default height, defaults to 800px', parseInt)\n        .option('--min-width <value>', 'set window minimum width, defaults to 0px', parseInt)\n        .option('--min-height <value>', 'set window minimum height, defaults to 0px', parseInt)\n        .option('--max-width <value>', 'set window maximum width, default is no limit', parseInt)\n        .option('--max-height <value>', 'set window maximum height, default is no limit', parseInt)\n        .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n        .option('-f, --fast-quit', 'quit app after window close (OSX only), defaults to false')\n        .option('-u, --user-agent <value>', 'set the user agent string for the app')\n        .option('--honest', 'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser')\n        .option('--ignore-certificate', 'ignore certificate related errors')\n        .option('--insecure', 'enable loading of insecure content, defaults to false')\n        .option('--flash', 'if flash should be enabled')\n        .option('--flash-path <value>', 'path to Chrome flash plugin, find it in `Chrome://plugins`')\n        .option('--inject <value>', 'path to a file to be injected', collect, [])\n        .option('--full-screen', 'if the app should always be started in full screen')\n        .option('--maximize', 'if the app should always be started maximized')\n        .option('--hide-window-frame', 'disable window frame and controls')\n        .option('--verbose', 'if verbose logs should be displayed')\n        .option('--disable-context-menu', 'disable the context menu')\n        .option('--disable-dev-tools', 'disable developer tools')\n        .option('--zoom <value>', 'default zoom factor to use when the app is opened, defaults to 1.0', parseFloat)\n        .option('--internal-urls <value>', 'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)')\n        .parse(process.argv);\n\n    if (!process.argv.slice(2).length) {\n        program.help();\n    }\n\n    nativefier(program, (error, appPath) => {\n        if (error) {\n            console.error(error);\n            return;\n        }\n\n        if (!appPath) {\n            // app exists and --overwrite is not passed\n            return;\n        }\n        console.log(`App built to ${appPath}`);\n    });\n}\n"],"sourceRoot":"/source/"}