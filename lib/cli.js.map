{"version":3,"sources":["cli.js"],"names":["packageJson","require","collect","val","memo","push","main","module","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","parse","process","argv","slice","length","help","error","appPath","console","log"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport nativefier from './index';\n\nconst packageJson = require('./../package');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nif (require.main === module) {\n  program\n    .version(packageJson.version)\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', '\\'osx\\', \\'linux\\' or \\'windows\\'')\n    .option('-a, --arch <value>', '\\'ia32\\' or \\'x64\\' or \\'armv7l\\'')\n    .option('-e, --electron-version <value>', 'electron version to package, without the \\'v\\', see https://github.com/atom/electron/releases')\n    .option('--no-overwrite', 'do not override output directory if it already exists, defaults to false')\n    .option('-c, --conceal', 'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/')\n    .option('--counter', 'if the target app should use a persistant counter badge in the dock (OSX only), defaults to false')\n    .option('-i, --icon <value>', 'the icon file to use as the icon for the app (should be a .icns file on OSX, .png for Windows and Linux)')\n    .option('--width <value>', 'set window default width, defaults to 1280px', parseInt)\n    .option('--height <value>', 'set window default height, defaults to 800px', parseInt)\n    .option('--min-width <value>', 'set window minimum width, defaults to 0px', parseInt)\n    .option('--min-height <value>', 'set window minimum height, defaults to 0px', parseInt)\n    .option('--max-width <value>', 'set window maximum width, default is no limit', parseInt)\n    .option('--max-height <value>', 'set window maximum height, default is no limit', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option('-f, --fast-quit', 'quit app after window close (OSX only), defaults to false')\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option('--honest', 'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser')\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--ignore-gpu-blacklist', 'allow WebGl apps to work on non supported graphics cards')\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option('--insecure', 'enable loading of insecure content, defaults to false')\n    .option('--flash', 'if flash should be enabled')\n    .option('--flash-path <value>', 'path to Chrome flash plugin, find it in `Chrome://plugins`')\n    .option('--disk-cache-size <value>', 'forces the maximum disk space (in bytes) to be used by the disk cache')\n    .option('--inject <value>', 'path to a CSS/JS file to be injected', collect, [])\n    .option('--full-screen', 'if the app should always be started in full screen')\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option('--zoom <value>', 'default zoom factor to use when the app is opened, defaults to 1.0', parseFloat)\n    .option('--internal-urls <value>', 'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)')\n    .option('--crash-reporter <value>', 'remote server URL to send crash reports')\n    .option('--single-instance', 'allow only a single instance of the application')\n    .parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n\n  nativefier(program, (error, appPath) => {\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    console.log(`App built to ${appPath}`);\n  });\n}\n"]}